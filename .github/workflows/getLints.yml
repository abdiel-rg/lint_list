name: getLints

on:
  schedule:
  - cron: "0 0 * * *"  # Run every day
  push:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  getLints:
    strategy:
      max-parallel: 0
      fail-fast: true
    environment: production
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Save all.yaml file
        id: save_file
        shell: pwsh
        run: |
          Set-Location ".\lib";
          [string]$data = curl "https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml";
          [string]$file = Get-Content "./all.yaml";
          [bool]$should_commit = $data.Length -ne $file.Length;
          Write-Output "::set-output name=shouldCommit::$should_commit";
          Write-Output "SHOULD_COMMIT=$should_commit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          curl "https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml" -O;
          
      - name: Update version
        if: ${{ SHOULD_COMMIT }} == 'True'
        shell: pwsh
        run: |
          Write-Output ${{ SHOULD_COMMIT}}
          [string]$filePath = "./pubspec.yaml";
          [string]$regexFile = "version: 1.0.(\d+)";
          $file = Get-Content $filePath -Raw;

          $file -match $regexFiele;

          [int]$versionNumber = $Matches[1];
          [int]$newVersionNumber = $versionNumber + 1;

          ($file -replace $regexFile, "version: 1.0.$newVersionNumber").Trim() | Set-Content $filePath;

          Add-Content -Path ".\CHANGELOG.md" -Value "`n## 1.0.$newVersionNumber";
      
      - name: Commit if file changed
        uses: stefanzweifel/git-auto-commit-action@v4.14.0
        with:
            commit_message: Copy all.yaml
  publish:
      if: ${{ SHOULD_COMMIT }} == 'True'
      needs: [getLints]
      environment: production
      container:
       image:  google/dart:latest
      runs-on: ubuntu-latest
      steps: 
        - uses: actions/checkout@v2
        - name: Install dependencies
          run: pub get
          
        - name: Print SHOULD_COMMIT
          shell: pwsh
          run: Write-Output ${{ SHOULD_COMMIT }}
          
        - name: Setup Pub Credentials
          shell: bash
          env:
            PUB_DEV_PUBLISH_ACCESS_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
            PUB_DEV_PUBLISH_REFRESH_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
            PUB_DEV_PUBLISH_TOKEN_ENDPOINT: ${{ secrets.PUB_DEV_PUBLISH_TOKEN_ENDPOINT }}
            PUB_DEV_PUBLISH_EXPIRATION: ${{ secrets.PUB_DEV_PUBLISH_EXPIRATION }}
          run: |
            sh ./pub_login.sh
            
        - name: Check Publish Warnings
          run: pub publish --dry-run
          
        - name: Publish Package
          if: ${{ SHOULD_COMMIT }} == 'True'
          run: pub publish -f

