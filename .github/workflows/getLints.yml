name: getLints

on:
  schedule:
  - cron: "0 0 * * 0"  # Run every week
  push:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  getLints:
    strategy:
      max-parallel: 0
      fail-fast: true
    environment: production
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Save all.yaml file
        id: save_file
        shell: pwsh
        run: |
          Set-Location ".\lib";
          [string]$data = curl "https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml";
          [string]$file = Get-Content "./all.yaml";
          [bool]$should_commit = $data.Length -ne $file.Length;
          Write-Output "should_commit: $should_commit";
          Write-Output "::set-output name=shouldCommit::$should_commit";
          Write-Output "SHOULD_COMMIT=$should_commit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          curl "https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml" -O;
          
      - name: Print SHOULD_COMMIT
        shell: pwsh
        run: |
          Write-Output "ShouldCommit: ${{ steps.save_file.outputs.shouldCommit }}"
          
      - name: Update version
        id: update_version
        if: steps.save_file.outputs.shouldCommit == 'True'
        shell: pwsh
        run: |
          Write-Output ${{ Env.SHOULD_COMMIT}}
          [string]$filePath = "./pubspec.yaml";
          [string]$regexFile = "version: 1.0.(\d+)";
          $file = Get-Content $filePath -Raw;

          $file -match $regexFile;

          [int]$versionNumber = $Matches[1];
          [int]$newVersionNumber = $versionNumber + 1;

          ($file -replace $regexFile, "version: 1.0.$newVersionNumber").Trim() | Set-Content $filePath;

          Add-Content -Path ".\CHANGELOG.md" -Value "`n## 1.0.$newVersionNumber";
          
      - name: Set version variables 
        shell: pwsh
        run: |
          (Get-Content "./pubspec.yaml" -Raw) -match "version: 1.0.(\d+)";
          Write-Output "::set-output name=latest_version_local::$Matches[1]";
          Write-Output "::set-output name=latest_version_pub_dev::$((curl "https://pub.dev/api/packages/lint_list" -s | ConvertFrom-Json).latest.version)";
          
          
      - name: Print variables
        id: print_variables
        shell: pwsh
        run: |
          Write-Output latest_version_local: ${{ needs.getLints.outputs.latest_version_local }}
          Write-Output latest_version_pub_dev: ${{ needs.getLints.outputs.latest_version_pub_dev }}
          Write-Output shouldCommit: ${{ needs.getLints.outputs.shouldCommit }}
      
      - name: Commit if file changed
        uses: stefanzweifel/git-auto-commit-action@v4.14.0
        with:
            commit_message: Copy all.yaml
            
    outputs:
#       should_commit: steps.save_file.outputs.shouldCommit
      latest_version_local: steps.print_variables.outputs.latest_version_local
      latest_version_pub_dev: steps.print_variables.outputs.latest_version_pub_dev
      should_commit: Env.SHOULD_COMMIT
          
  publish:
      if: (needs.getLints.outputs.shouldCommit == 'True') || (needs.getLints.outputs.latest_version_local != needs.getLints.outputs.latest_version_pub_dev)
      needs: [getLints]
      environment: production
      container:
       image:  google/dart:latest
      runs-on: ubuntu-latest
      steps: 
        - uses: actions/checkout@v2
        - name: Install dependencies
          run: pub get
          
        - name: Print SHOULD_COMMIT
          shell: pwsh
          run: |
            Write-Output shouldCommit: ${{ needs.getLints.outputs.latest_version_local }}
            Write-Output shouldCommit: ${{ needs.getLints.outputs.latest_version_pub_dev }}
            Write-Output shouldCommit: ${{ needs.getLints.outputs.shouldCommit }}
          
        - name: Setup Pub Credentials
          shell: bash
          env:
            PUB_DEV_PUBLISH_ACCESS_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
            PUB_DEV_PUBLISH_REFRESH_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
            PUB_DEV_PUBLISH_TOKEN_ENDPOINT: ${{ secrets.PUB_DEV_PUBLISH_TOKEN_ENDPOINT }}
            PUB_DEV_PUBLISH_EXPIRATION: ${{ secrets.PUB_DEV_PUBLISH_EXPIRATION }}
          run: |
            sh ./pub_login.sh
            
        - name: Check Publish Warnings
          run: pub publish --dry-run
          
        - name: Publish Package
#           if: needs.getLints.outputs.shouldCommit == 'True'
          run: pub publish -f

