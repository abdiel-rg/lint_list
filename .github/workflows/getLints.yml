name: getLints

on:
  schedule:
  - cron: "0 0 * * *"  # Run every day
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  getLints:
    environment: production
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Save all.yaml file
        id: save_file
        shell: pwsh
        run: |
          Set-Location ".\lib";
          [string]$data = curl "https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml";
          [string]$file = Get-Content "./all.yaml";
          Write-Output "::set-output name=shouldCommit::$($data.Length -ne $file.Length)}";
          Set-Content -Path "./all.yaml" -Value $data;

          

      - name: Update version
        if: steps.save_file.outputs.shouldCommit == "True"
        shell: pwsh
 
        run: |
          [string]$filePath = "./pubspec.yaml";
          [string]$regexFile = "version: 1.0.(\d+)";
          $file = Get-Content $filePath -Raw;

          $file -match $regexFile;

          [int]$versionNumber = $Matches[1];
          [int]$newVersionNumber = $versionNumber + 1;

          ($file -replace $regexFile, "version: 1.0.$newVersionNumber").Trim() | Set-Content $filePath;

          Add-Content -Path ".\CHANGELOG.md" -Value "`n## 1.0.$newVersionNumber";
      
      - name: Commit if file changed
        uses: stefanzweifel/git-auto-commit-action@v4.14.0
        with:
            commit_message: Copy all.yaml
  publish:
      environment: production
      container:
       image:  google/dart:latest
      runs-on: ubuntu-latest
      steps: 
        - uses: actions/checkout@v2
               # if: steps.auto-commit-action.outputs.changes_detected == 'false'
        - name: Install dependencies
          run: pub get
        - name: Setup Pub Credentials
          shell: bash
          env:
            PUB_DEV_PUBLISH_ACCESS_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
            PUB_DEV_PUBLISH_REFRESH_TOKEN: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
            PUB_DEV_PUBLISH_TOKEN_ENDPOINT: ${{ secrets.PUB_DEV_PUBLISH_TOKEN_ENDPOINT }}
            PUB_DEV_PUBLISH_EXPIRATION: ${{ secrets.PUB_DEV_PUBLISH_EXPIRATION }}
          run: |
            sh ./pub_login.sh
        - name: Check Publish Warnings
          run: pub publish --dry-run
        - name: Publish Package
          if: steps.save_file.outputs.shouldCommit == "True"
          run: pub publish -f

